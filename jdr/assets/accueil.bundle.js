/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./js/accueil.js":
/*!***********************!*\
  !*** ./js/accueil.js ***!
  \***********************/
/***/ (() => {

eval("//console.log('accueil.js');\nconst main = document.querySelector('main.content');\nconst container = document.querySelector('section.container');\nconst containerUtils = document.querySelector('section.utilitaires');\nconst containerInfos = document.querySelector('section.informations');\nconst TOOLTIP = document.querySelector('section.tooltip');\nconst background = document.querySelector('img#background');\nconst svg = document.querySelector('svg#data');\nconst bordure = document.querySelector('div.bordure');\nconst boussole = document.querySelector('div.boussole');\nconst echelle = document.querySelector('div.echelle');\nconst valeursP = document.querySelectorAll('.graduations > div > p');\nconst valeursTab = [0, 200, 400, 600, 800, 1000];\nconst max = document.querySelector('div.plein-ecran');\nconst GGS = document.querySelectorAll('#data > g:not(.divers):not(.nom)');\nlet previousG;\nconst LOCALITE = document.querySelectorAll('path.localite');\nconst carte = document.querySelector('div.feerune');\nconst infosNom = document.querySelector('div.nom p');\nconst infosCapitale = document.querySelector('div.capitale p');\nconst infosPopulation = document.querySelector('div.population p');\nconst description = document.querySelector('div.description p');\nconst infosRegions = document.querySelector('div.regions ul');\nconst infosLienFr = document.querySelector('div.lien p.fr a');\nconst infosLienEng = document.querySelector('div.lien p.eng a');\nconst ROOT = document.documentElement;\nconst REDIM = 4;\nconst VIEWBOX_X = 10200 / REDIM;\nconst VIEWBOX_Y = 6600 / REDIM;\nconst WINDOWRATIO = 51 / 33;\nconst BORDURE = 40;\nlet newScrollLeft;\nlet newScrollTop;\nlet largeurContainer;\nlet hauteurContainer;\nlet newLargeurContainer;\nlet newHauteurContainer;\nlet largeurCarte;\nlet hauteurCarte;\nlet newLargeurCarte;\nlet newHauteurCarte;\nconst scaleAmount = 0.5;\nlet carteScale = 1;\nlet containerScale;\n\n//Les objets qui récupèrent les données originales.\nlet dataGG = {};\nlet box = {};\nfunction init() {\n  console.log('Hello World!');\n  resize();\n  originalData();\n  //console.log(dataGG);\n  //utilsInit();\n  console.log('startloading');\n  // Appel de la fonction asynchrone après les autres fonctions\n  imgAsync().then(() => {\n    background.src = \"https://makh.fr/divers/img/highRes.jpg\";\n    console.log('High-resolution image loaded');\n    // Effectuez ici les opérations supplémentaires que vous souhaitez effectuer après le chargement de l'image haute résolution.\n  }).catch(error => {\n    console.error('Failed to load high-resolution image:', error);\n  });\n}\nfunction imgAsync() {\n  return new Promise((resolve, reject) => {\n    let Newbackground = new Image();\n    Newbackground.src = \"https://makh.fr/divers/img/highRes.jpg\";\n    Newbackground.onload = () => resolve();\n    Newbackground.onerror = error => reject(error);\n  });\n}\nfunction infos(g) {\n  infosRegions.innerHTML = '';\n  const lienFr = g.getAttribute('data-nom');\n  const nomFr = dataToTxt(lienFr);\n  const nomEng = g.id;\n  infosNom.textContent = nomFr;\n  infosLienFr.textContent = nomFr;\n  infosLienFr.href = \"https://forgottenrealms.fandom.com/wiki/\" + lienFr;\n  infosLienEng.textContent = nomEng;\n  infosLienEng.href = \"https://forgottenrealms.fandom.com/wiki/\" + nomEng;\n  infosCapitale.textContent = g.getAttribute('data-capitale');\n  infosPopulation.textContent = g.getAttribute('data-population') + \" habitants\";\n  description.textContent = g.getAttribute('data-description');\n  if (g.children.length < 3) {\n    infosRegions.innerHTML = 'Aucune information';\n  } else {\n    for (let i = 0; i < g.children.length; i++) {\n      const path = g.children[i];\n      if (path.tagName === 'g') {\n        let nom = path.getAttribute('data-nom');\n        const li = document.createElement('li');\n        li.textContent = dataToTxt(nom);\n        infosRegions.appendChild(li);\n      } else if (path.classList.contains('localite')) {\n        let nom = path.id;\n        const li = document.createElement('li');\n        li.textContent = dataToTxt(nom);\n        infosRegions.appendChild(li);\n      }\n    }\n  }\n}\nfunction echelleZoom() {\n  //Calcul des nouvelles graduations\n  for (let i = 0; i < valeursP.length - 1; i++) {\n    valeursP[i + 1].textContent = Math.floor(valeursTab[i] / carteScale);\n  }\n\n  // Calcul de la nouvelle opacité du hover\n  const opacity = 0.8 - 0.08 * carteScale;\n  ROOT.style.setProperty('--opacity', opacity);\n  // console.log('Zoom:', carteScale);\n  // console.log('Opacité:', opacity);\n}\n\nfunction zoom(event) {\n  //On suppose un zoom IN\n  let scaleDelta = scaleAmount;\n  if (event.deltaY > 0) {\n    //C'était un zoom OUT\n    scaleDelta = -scaleAmount;\n  }\n\n  //On calcule le nouveau scaling.\n  const newScale = Math.max(Math.min(carteScale + scaleDelta, 10), 1);\n\n  // Get mouse position relative to the carte\n  const rect = carte.getBoundingClientRect();\n  carte.style.transform = `scale(${newScale})`;\n\n  //dimensions actuelles du conteneur\n  largeurContainer = VIEWBOX_X * containerScale * carteScale;\n  hauteurContainer = VIEWBOX_Y * containerScale * carteScale;\n\n  //nouvelles dimensions (après zoom)\n  newLargeurContainer = VIEWBOX_X * containerScale * newScale;\n  newHauteurContainer = VIEWBOX_Y * containerScale * newScale;\n\n  //dimensions actuelles de la carte\n  largeurCarte = event.clientX + Math.abs(rect.left);\n  hauteurCarte = event.clientY + Math.abs(rect.top);\n\n  //nouvelles dimensions (après zoom)\n  newLargeurCarte = largeurCarte / largeurContainer * newLargeurContainer;\n  newHauteurCarte = hauteurCarte / hauteurContainer * newHauteurContainer;\n\n  //positionnement de la carte (avec les nouvelles dimensions)\n  newScrollLeft = (newLargeurCarte - event.clientX) / containerScale;\n  newScrollTop = (newHauteurCarte - event.clientY) / containerScale;\n  container.scrollLeft = newScrollLeft;\n  container.scrollTop = newScrollTop;\n  carteScale = newScale;\n  echelleZoom();\n}\nfunction zoomRegion(g) {\n  //Nom de la région\n  //console.log(g.id);\n\n  if (g.classList.contains('zoomed')) {\n    // On récupère les données initiales\n    const GDATA = dataGG[g.id];\n    const newScale = GDATA.scale;\n    const posGauche = GDATA.left;\n    const posHaut = GDATA.top;\n    // console.log(newScale);\n    // console.log(posGauche);\n    // console.log(posHaut);\n\n    // Appliquer le nouveau zoom\n    carte.style.transform = \"scale(\" + newScale + \")\";\n    // Positionner la région en haut à gauche\n    container.scrollLeft = posGauche;\n    container.scrollTop = posHaut;\n\n    // Mise à jour de carteScale\n    carteScale = newScale;\n  } else {\n    // Appliquer le nouveau zoom\n    carte.style.transform = \"scale(1)\";\n    // Positionner la région en haut à gauche\n    container.scrollLeft = 0;\n    container.scrollTop = 0;\n\n    // Mise à jour de carteScale\n    carteScale = 1;\n  }\n  echelleZoom();\n}\n\n//DONNES POUR LE ZOOM DES REGIONS\nfunction originalData() {\n  let box = carte.getBoundingClientRect();\n  let x = box.width;\n  let y = box.height;\n  for (let g of GGS) {\n    let rect = g.getBoundingClientRect();\n    const largeurObj = rect.width;\n    const hauteurObj = rect.height;\n    const xRatio = largeurObj / x;\n    const yRatio = hauteurObj / y;\n    let ratio = yRatio;\n    let vertical = true;\n    if (xRatio > yRatio) {\n      vertical = false;\n      ratio = xRatio;\n    }\n\n    //On récupère le scaling de cet objet\n    const scaling = 1 / ratio * 0.94; //0.94 = marges\n\n    const largeurBox = VIEWBOX_X * scaling;\n    const hauteurBox = VIEWBOX_Y * scaling;\n    const posLeft = rect.left / x;\n    const posTop = rect.top / y;\n\n    //on récupère le positionnement de cet objet\n    let scrollY;\n    let scrollX;\n    if (vertical) {\n      scrollY = posTop * hauteurBox - BORDURE;\n      scrollX = posLeft * largeurBox - 5 * BORDURE;\n    } else {\n      scrollY = posTop * hauteurBox - 5 * BORDURE;\n      scrollX = posLeft * largeurBox - BORDURE;\n    }\n\n    //On met les données dans le tableau associatif.\n    dataGG[g.id] = {\n      left: scrollX,\n      top: scrollY,\n      scale: scaling\n    };\n  }\n}\nfunction resize() {\n  // Fonction qui permet de redimensionner un groupe de personnages en fonction de l'écran de l'utilisateur\n  //console.log('resize');\n\n  container.style.removeProperty('transform');\n  containerUtils.style.removeProperty('transform');\n  containerInfos.style.removeProperty('height');\n  containerInfos.style.removeProperty('width');\n  containerInfos.style.removeProperty('transform');\n  max.style.removeProperty('display');\n  const widthScreen = document.documentElement.clientWidth; // On récupère la largeur de l'écran de l'utilisateur\n  const heightScreen = document.documentElement.clientHeight; // On récupère la hauteur de l'écran de l'utilisateur\n  const ratio = widthScreen / heightScreen / (51 / 33); // Le ratio de notre image de fond (la salle du conseil) est de 16/9e\n\n  // On stocke les ratios hauteurs & largeur par rapport à la taille actuelle de l'écran de l'utilisateur minorés de 2,5% pour les marges\n  let widthRatio = widthScreen / VIEWBOX_X;\n  let heightRatio = heightScreen / VIEWBOX_Y;\n\n  /* On vérifie si l'écran est plus ou moins au bonnes dimensions (+/-20%) ou si il est beaucoup trop large ou beaucoup trop haut */\n  /* On utilisera le ratio le plus réducteur */\n  containerScale = widthRatio;\n  if (ratio > 1) {\n    containerScale = heightRatio;\n  }\n  const containerHauteur = container.offsetHeight * containerScale;\n  const containerLargeur = container.offsetWidth * containerScale;\n  const hauteurTemp = heightScreen - containerHauteur;\n  const largeurTemp = widthScreen - containerLargeur;\n  if (hauteurTemp > 150 || largeurTemp > 200) {\n    if (ratio < 1) {\n      //HAUTEUR DE LA CARTE REDUITE\n      containerInfos.style.height = hauteurTemp + \"px\";\n    } else if (ratio > 1) {\n      //LARGEUR DE LA CARTE REDUITE\n      containerInfos.style.width = largeurTemp + \"px\";\n    }\n    container.style.transform = \"scale(\" + containerScale + \")\";\n    containerUtils.style.transform = \"scale(\" + containerScale + \")\";\n  } else {\n    containerInfos.style.height = \"40vh\";\n    containerInfos.style.transform = \"scaleY(0)\";\n    container.style.transform = \"scaleX(\" + widthRatio + \") scaleY(\" + heightRatio + \")\";\n    containerUtils.style.transform = \"scaleX(\" + widthRatio + \") scaleY(\" + heightRatio + \")\";\n    max.style.display = \"block\";\n  }\n}\n\n//LISTENERS\nwindow.addEventListener('load', function () {\n  //CHARGEMENT\n  init();\n});\ncarte.addEventListener('wheel', event => {\n  //ZOOM\n  event.preventDefault();\n  zoom(event);\n});\n\n//REDIMENSIONNEMENT DE LA CARTE ET DE LA ZONE DES INFOS\nwindow.addEventListener('resize', debounce(resize, 300));\nGGS.forEach(g => {\n  //INFOS ('mouseover') & ZOOM ('click')\n  g.addEventListener('mouseover', () => {\n    g.classList.add('survol');\n    if (previousG) {\n      if (!previousG.classList.contains('zoomed')) {\n        infos(g);\n      }\n    } else {\n      infos(g);\n    }\n  });\n  g.addEventListener('mouseleave', function () {\n    g.classList.remove('survol');\n  });\n  g.addEventListener('click', function (event) {\n    event.stopPropagation();\n    g.classList.toggle('zoomed');\n    if (previousG) {\n      previousG.classList.remove('zoomed');\n    }\n    ;\n    zoomRegion(g);\n    infos(g);\n    previousG = g;\n  });\n});\nmax.addEventListener('click', () => {\n  //OUVERTURE DU MENU INFOS (Uniquement si la carte est en plein écran)\n  resize();\n  main.classList.toggle('max');\n});\nLOCALITE.forEach(function (loc) {\n  ['mouseenter', 'mouseleave', 'mouseover', 'mouseout', 'mousedown', 'mouseup', 'click'].forEach(function (action) {\n    loc.addEventListener(action, function (event) {\n      event.stopPropagation();\n    });\n  });\n  loc.addEventListener('mouseover', function () {\n    loc.classList.add('survol');\n  });\n  loc.addEventListener('mouseleave', function () {\n    loc.classList.remove('survol');\n  });\n  loc.addEventListener('click', () => {\n    //PARTIE PERSONNAGE (jdr)\n    window.location.href = \"https://makh.fr/jdr/localite/\" + loc.id;\n  });\n});\n\n/*\r\ncontainer.addEventListener('contextmenu', function (event) {\r\n    event.preventDefault(); // Empêche l'affichage du menu contextuel par défaut\r\n});\r\n*///# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./js/accueil.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./js/accueil.js"]();
/******/ 	
/******/ })()
;